# See https://serverless.com/framework/docs/providers/aws/guide/serverless.yml/
# For more information about this configuration file.

# NOTE: You should search this file for "# @TODO UPDATE THIS FOR YOUR SERVICE" and make
# the updates necessary for your service's specific configuration.

service:
  # @TODO UPDATE THIS FOR YOUR SERVICE
  # Select a distinct, unique name for your service
  # according to Passport standards. Ask Mark!
  name: permits-todos

frameworkVersion: ">=1.0.0 <2.0.0"

package:
  individually: true
  include:
    - src/**/*.js
    - src/**/*.map.js
  exclude:
    - src/**/*.test.js
    - src/**/*.spec.js
    - node_modules/aws-sdk/**
    - coverage/**

plugins:
  - serverless-webpack
  - serverless-jest-plugin
  - serverless-domain-manager
  - serverless-offline
  - '@passportinc/serverless-tidy-package-plugin'

custom:
  apiVersion: v1
  stage: ${self:custom.${opt:target}.stage}

  local:
    stage: local
    LOG_LEVEL: ${env:LOG_LEVEL, 'debug'}
    LOG_FILTER: ${env:LOG_FILTER, ''}
    LOG_FORMAT: ${env:LOG_FORMAT, 'pretty'}
    LOG_NAMESPACES: ${env:LOG_NAMESPACES, ''}
    PATH_PREFIX: ${self:custom.customDomain.basePath}

  dev:
    stage: dev
    LOG_LEVEL: ${env:LOG_LEVEL, 'verbose'}

  staging:
    stage: staging
    LOG_LEVEL: verbose

  prod_us:
    stage: prod
    LOG_LEVEL: info

  # prod_uk:
  #   stage: prod
  #   LOG_LEVEL: info

  # prod_ca:
  #   stage: prod
  #   LOG_LEVEL: info

  customDomain:
    # @TODO UPDATE THIS FOR YOUR SERVICE
    # Choose a vertical or the shared domain...
    # Shared should be used sparingly. Consult your friendly
    # lead architect if you'd like to create a shared service.
    # domainName: ${cf:apigateway-core.ProxyApiV1SharedDomain}
#    domainName: ${cf:apigateway-core.ProxyApiV1PermitsDomain}
    # @TODO UPDATE THIS FOR YOUR SERVICE
    # This should point to the basepath for your service's url.
    # For example: `api.dev.passportlabs.io/[vertical]/[base path]`
    # Or, if this is a shared service: `api.dev.passportlabs.io/[base path]`
    # A warning about shared services: you can overwrite another service's basepath!
    # Make sure your basepath is unique!
    basePath: todos
    stage: ${self:custom.stage}
    createRoute53Record: false

  serverless-offline:
    host: 127.0.0.1
    port: 45125

  tidyPackage:
    preset: aggressive
    output: info
    exclude:
      - node_modules/source-map/dist/**
      - node_modules/validatorjs/spec/**
      - node_modules/validatorjs/dist/**

  webpack:
    includeModules:
      forceExclude:
        - aws-sdk


provider:
  name: aws
  runtime: ${env:NODE_RUNTIME, 'nodejs8.10'}
  region: ${opt:region}
  endpointType: regional
  memorySize: 256
  timeout: 29
  # @TODO UPDATE THIS FOR YOUR SERVICE
  # Choose a role specific to this service or a common one.
  # If using the `[service]-iam.yml` file, choose the
  # commented out option below.
  # role: ${cf:${self:service.name}-iam.ServiceRoleArn}
#  role: ${cf:iam-common.DefaultPermitsSvcRoleArn}
#  profile: node
  stage: ${self:custom.stage}
#  deploymentBucket:
#    name: passportlabs-${self:custom.stage}-continuous-delivery
#    serverSideEncryption: AES256
    # Uncomment these if needs to be inside the VPC
    # vpc:
    # securityGroupIds:
    #   - ${cf:infrastructure.LambdaGenericSG}
    # subnetIds:
    #   - ${cf:infrastructure.PrivateSubnet1}
    #   - ${cf:infrastructure.PrivateSubnet2}
    #   - ${cf:infrastructure.PrivateSubnet3}
  environment:
    STAGE: ${self:custom.stage}
    PROVIDER: ${self:provider.name}
    PATH_PREFIX: ${self:custom.${opt:target}.PATH_PREFIX, ''}
    LOG_LEVEL: ${self:custom.${opt:target}.LOG_LEVEL, 'info'}
    LOG_FILTER: ${self:custom.${opt:target}.LOG_FILTER, ''}
    LOG_FORMAT: ${self:custom.${opt:target}.LOG_FORMAT, 'json'}
    LOG_NAMESPACES: ${self:custom.${opt:target}.LOG_NAMESPACES, ''}
    # You should reference tables via CloudFormation variables and should *not*
    # hard code them. However, so this example works locally we've harded it below.
    # TODO_TABLE_NAME: ${cf:${self:service.name}-resources.DynamoDBTable0Name}
    TODO_TABLE_NAME: 'permits-todos'
  tags:
    service: ${self:service.name}
    # @TODO UPDATE THIS FOR YOUR SERVICE
    # Please keep this information accurate!
    team: team_name_lowercase


functions:
  func_code_challenges:
    handler: src/functions/api/index.app
    events:
      - http:
          path: /v1/code_challenges
          method: get

resources:
  Resources:
    # This is used to override the default naming conventions
    ApiGatewayRestApi:
      Type: AWS::ApiGateway::RestApi
      Properties:
        Name: ${self:custom.apiVersion}-${self:service.name}
